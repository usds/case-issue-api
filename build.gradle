plugins {
	id 'org.springframework.boot' version '2.2.9.RELEASE'
	id 'java'
	id 'checkstyle'
	id 'jacoco'
	id 'org.sonarqube'  version '2.7.1'
	id "com.gorylenko.gradle-git-properties" version "2.2.0"
	id 'eclipse'
}

apply plugin: 'io.spring.dependency-management'

group = 'gov.usds'
version = '0.2.2-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.json:json:20180130'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	// this next line is only here so we can tweak the cookie serializer to set SameSite:
	// otherwise, a runtimeOnly dependency on spring-session-jdbc would be sufficient.
	implementation 'org.springframework.session:spring-session-core'
	runtimeOnly 'org.springframework.session:spring-session-jdbc'

	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.data:spring-data-rest-hal-browser'
	implementation 'org.springframework.retry:spring-retry'

	// access logging:
	implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

	implementation "io.springfox:springfox-swagger2:${springFoxVersion}"
	implementation "io.springfox:springfox-swagger-ui:${springFoxVersion}"
	implementation "io.springfox:springfox-bean-validators:${springFoxVersion}"
//	try this again if and when springfox 3.0 comes out:
//	implementation "io.springfox:springfox-data-rest:${springFoxVersion}"

	implementation 'com.fasterxml.jackson.module:jackson-module-jaxb-annotations'
	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"
	// CVE-2020-14060, CVE-2020-14061, CVE-2020-14062
	// implementation "com.fasterxml.jackson.core:jackson-databind:2.9.10.5"

	implementation "com.vladmihalcea:hibernate-types-52:2.5.0"
	implementation "org.liquibase:liquibase-core"

	runtimeOnly 'org.postgresql:postgresql'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

task makeTestCerts(type: Exec) {
	executable "make"
	args = [ "--makefile", "Makefile-testcerts"]
}

task cleanTestCerts(type: Exec) {
	executable "make"
	args = [ "--makefile", "Makefile-testcerts", "clean"]
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.83
			}
		}

		rule {
			enabled = true
			includes = ['gov.usds.case_issues.services']
			element = 'PACKAGE'

			limit {
				minimum = 0.85
			}
		}
	}
}

configurations {
	compileClasspath {
		resolutionStrategy.activateDependencyLocking()
	}
	runtimeClasspath {
		resolutionStrategy.activateDependencyLocking()
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification
testClasses.dependsOn makeTestCerts
clean.dependsOn cleanTestCerts

springBoot {
	buildInfo()
}

task dbStart(type: Exec) {
	commandLine "docker-compose", "up", "-d", "db"
}

task dbStop(type: Exec) {
	commandLine "docker-compose", "down"
}

task testDbStart(type: Exec) {
	commandLine "docker-compose", "-f", "docker-compose.test.yml", "-p", "case-issue-api-tests", "up", "-d", "test-db"
}

task testDbStop(type: Exec) {
	commandLine "docker-compose", "-f", "docker-compose.test.yml", "-p", "case-issue-api-tests", "down"
}
