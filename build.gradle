plugins {
	id 'org.springframework.boot' version '2.1.7.RELEASE'
	id 'java'
	id 'checkstyle'
	id 'jacoco'
	id 'org.sonarqube'  version '2.7.1'
	id "com.gorylenko.gradle-git-properties" version "2.2.0"
}

apply plugin: 'io.spring.dependency-management'

ext{ springFoxVersion = '2.9.2'}
group = 'gov.usds'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.json:json:20180130'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'

	implementation 'org.springframework.boot:spring-boot-starter-data-rest'
	implementation 'org.springframework.data:spring-data-rest-hal-browser'
	implementation 'org.springframework.retry:spring-retry'

	// access logging:
	implementation 'net.rakugakibox.spring.boot:logback-access-spring-boot-starter:2.7.1'

	implementation "io.springfox:springfox-swagger2:${springFoxVersion}"
	implementation "io.springfox:springfox-swagger-ui:${springFoxVersion}"
	implementation "io.springfox:springfox-bean-validators:${springFoxVersion}"
//	try this again if and when springfox 3.0 comes out:
//	implementation "io.springfox:springfox-data-rest:${springFoxVersion}"

	implementation "com.fasterxml.jackson.core:jackson-annotations:2.9.10"
	implementation "com.fasterxml.jackson.core:jackson-core:2.9.10"
	implementation "com.fasterxml.jackson.core:jackson-databind:2.9.10"

	implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv"

	implementation "com.vladmihalcea:hibernate-types-52:2.5.0"
	implementation "org.liquibase:liquibase-core"

	runtimeOnly 'org.postgresql:postgresql'
	runtimeOnly 'org.springframework.session:spring-session-jdbc'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}

jacocoTestCoverageVerification {
	violationRules {
		rule {
			limit {
				minimum = 0.83
			}
		}

		rule {
			enabled = true
			includes = ['gov.usds.case_issues.services']
			element = 'PACKAGE'

			limit {
				minimum = 0.83
			}
		}
	}
}

configurations {
	compileClasspath {
		resolutionStrategy.activateDependencyLocking()
	}
	runtimeClasspath {
		resolutionStrategy.activateDependencyLocking()
	}
}

test.finalizedBy jacocoTestReport
check.dependsOn jacocoTestCoverageVerification

springBoot {
	buildInfo()
}
